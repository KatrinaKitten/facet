// Facet v0.1.1 | https://github.com/kgscialdone/facet
const facet=new function(){const mixins={},globalMixins=[];this.version="0.1.1";this.defineComponent=function defineComponent(tagName,template,{shadowMode:shadowMode="closed",observeAttrs:observeAttrs=[],applyMixins:applyMixins=[]}){const localMixins=new Set(applyMixins.concat(globalMixins).map((m=>mixins[m])));window.customElements.define(tagName,class FacetComponent extends HTMLElement{static observedAttributes=observeAttrs;#root=shadowMode!=="none"?this.attachShadow({mode:shadowMode}):this;connectedCallback(){const content=template.content.cloneNode(true);for(let mixin of localMixins)content[mixin.attachPosition](mixin.template.content.cloneNode(true));for(let script of content.querySelectorAll("script[on]")){let parent=script.parentElement??this;let handler=new Function("host","root","event",script.innerText).bind(parent,this,this.#root);for(let event of script.getAttribute("on").split(/\s+/g))parent.addEventListener(event,handler,{once:script.hasAttribute("once"),capture:script.hasAttribute("capture"),...script.hasAttribute("passive")?{passive:true}:{}});script.remove()}for(let el of content.querySelectorAll("[inherit]")){for(let attr of el.getAttribute("inherit").split(/\s+/g)){const[,ogname,rename,fn]=attr.match(/^([^\/>"'=]+)(?:>([^\/>"'=]+))?(?:\/(\w+))?$/);const cv=this.getAttribute(ogname),filter=window[fn];if(cv)el.setAttribute(rename??ogname,filter?.(cv,undefined,el,this)??cv);if(observeAttrs.includes(ogname))this.addEventListener("attributeChanged",(({detail:{name:name,oldValue:oldValue,newValue:newValue}})=>{if(name!==ogname)return;el.setAttribute(rename??ogname,filter?.(newValue,oldValue,el,this)??newValue)}))}el.removeAttribute("inherit")}this.#root.append(content);this.#event("connect")}disconnectedCallback(){this.#event("disconnect")}adoptedCallback(){this.#event("adopt")}attributeChangedCallback(name,oldValue,newValue){this.#event("attributeChanged",{name:name,oldValue:oldValue,newValue:newValue})}#event(n,d={}){this.dispatchEvent(new CustomEvent(n,{detail:{...d,component:this}}))}})};this.defineMixin=function defineMixin(name,template,{applyGlobally:applyGlobally=false,attachPosition:attachPosition="append"}){mixins[name]={template:template,attachPosition:attachPosition};if(applyGlobally)globalMixins.push(name)};this.discoverDeclarativeComponents=function discoverDeclarativeComponents(root){for(let template of root.querySelectorAll(`template[${facet.config.namespace}mixin]`))this.defineMixin(template.getAttribute(`${facet.config.namespace}mixin`),template,{applyGlobally:template.hasAttribute("global"),attachPosition:template.hasAttribute("prepend")?"prepend":"append"});for(let template of root.querySelectorAll(`template[${facet.config.namespace}component]`))this.defineComponent(template.getAttribute(`${facet.config.namespace}component`),template,{shadowMode:template.getAttribute("shadow")?.toLowerCase()??facet.config.defaultShadowMode,observeAttrs:template.getAttribute("observe")?.split(/\s+/g)??[],applyMixins:template.getAttribute("mixins")?.split(/\s+/g)??[]})};this.config={namespace:document.currentScript?.hasAttribute?.("namespace")?document.currentScript.getAttribute("namespace")||"facet-":"",autoDiscover:document.currentScript&&!document.currentScript.hasAttribute("libonly"),defaultShadowMode:document.currentScript?.getAttribute("shadow")??"closed"};(fn=>document.readyState==="interactive"?fn():document.addEventListener("DOMContentLoaded",fn,{once:true}))((()=>this.config.autoDiscover&&this.discoverDeclarativeComponents(document)))};
